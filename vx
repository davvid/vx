#!/bin/sh
# usage:
#   run a command inside a virtualenv:
#	    vx <virtualenv> <command>
#   escape from an active virtualenv and run a command:
#	    vx --reset <command>

prepend () {
    test -n "$2" && printf '%s:%s' "$1" "$2" || printf '%s' "$1"
}

is_darwin () {
    case "$OSTYPE" in
    darwin*)
        return 0
        ;;
    esac
    return 1
}

abspath () {
    (cd "$1" 2>/dev/null && pwd -L) || printf '%s' "$1"
}

get_python_version () {
    if test -e "$prefix/pyvenv.cfg"
    then
        # Newer virtualenvs provide pyvenv.cfg with a "version = " setting.
        # This is an order of magnitude faster than using Python.
        code='split($3, a, "."); print "python" a[1] "." a[2]'
        awk "/version = / { $code }; /version_info = / { $code }" \
		<"$prefix/pyvenv.cfg"
    else
        # pyvenv.cfg is not available.  Let's try a heuristic first before
        # resorting to calling into Python.
        #
        # We know that python2.7 provided $prefix/bin/python2.7
        if test -e "$prefix/bin/python2.7"
        then
            echo python2.7
        else
            # Override the python used to query/activate by setting $PYTHON.
            PYTHON=${PYTHON:-python}
            code='import sys; print("python%s.%s" % sys.version_info[:2])'
            "$PYTHON" -c "$code"
        fi
    fi
}

main () {
    if test "$1" = "--reset"
    then
        vx_reset "$@"
    else
        vx_activate "$@"
    fi
}

# Activate a virtulaenv and run a command inside of it.
vx_activate () {
    # The virtualenv prefix directory
    prefix=$(abspath "$1")
    if ! test -d "$prefix"
    then
        echo 1>&2 "vx: error: '$prefix' does not exist"
        exit 1
    fi

    # Setup PATH.
    if test -d "$prefix/bin"
    then
        PATH=$(prepend "$prefix/bin" "$PATH")
    fi
    if test -d "$prefix/Scripts"
    then
        PATH=$(prepend "$prefix/Scripts" "$PATH")
    fi
    export PATH

    # Find the lib directory.
    libdir=$(get_libdir "$prefix")

    # Setup PYTHONPATH and library paths.
    if test -n "$libdir"
    then
        if is_darwin
        then
            DYLD_LIBRARY_PATH=$(prepend "$libdir" "$DYLD_LIBRARY_PATH")
            export DYLD_LIBRARY_PATH
        else
            LD_LIBRARY_PATH=$(prepend "$libdir" "$LD_LIBRARY_PATH")
            export LD_LIBRARY_PATH
        fi

        python_version=$(get_python_version)
        site_packages="$libdir/$python_version/site-packages"
        if test -d "$site_packages"
        then
            PYTHONPATH=$(prepend "$site_packages" "$PYTHONPATH")
            export PYTHONPATH
        fi
    fi

    # Setup virtualenv.
    VIRTUAL_ENV="$prefix"
    export VIRTUAL_ENV

    unset PYTHON_HOME

    # Shift off the $1 virtualenv directory.
    shift

    # Execute the remainder
    exec "$@"
}

# Reset the environment to deactivate a virtualenv.
vx_reset () {
    # Consume the "--reset" flag
    shift

    if test -n "$VIRTUAL_ENV"
    then
        prefix="$VIRTUAL_ENV"

        # Reset VIRTUAL_ENV
        unset VIRTUAL_ENV

        # Reset PATH
        PATH=$(remove_path "$prefix/bin" "$PATH")
        PATH=$(remove_path "$prefix/Scripts" "$PATH")
        export PATH

        # Reset LD_LIBRARY_PATH / DYLD_LIBRARY_PATH
        libdir=$(get_libdir "$prefix")
        if is_darwin
        then
            DYLD_LIBRARY_PATH=$(remove_path "$libdir" "$DYLD_LIBRARY_PATH")
            if test -n "$DYLD_LIBRARY_PATH"
            then
                export DYLD_LIBRARY_PATH
            else
                unset DYLD_LIBRARY_PATH
            fi
        else
            LD_LIBRARY_PATH=$(remove_path "$libdir" "$LD_LIBRARY_PATH")
            if test -n "$LD_LIBRARY_PATH"
            then
                export LD_LIBRARY_PATH
            else
                unset LD_LIBRARY_PATH
            fi
        fi

        # Reset PYTHONPATH
        if test -n "$PYTHONPATH"
        then
            python_version=$(get_python_version)
            site_packages="$libdir/$python_version/site-packages"

            PYTHONPATH=$(remove_path "$site_packages" "$PYTHONPATH")
            if test -n "$PYTHONPATH"
            then
                export PYTHONPATH
            else
                unset PYTHONPATH
            fi
        fi
    fi

    exec "$@"
}

get_libdir () {
    # Find the lib directory.
    prefix="$1"
    if test -d "$prefix/lib64"
    then
        libdir="$prefix/lib64"
    elif test -d "$prefix/lib"
    then
        libdir="$prefix/lib"
    else
        libdir="$prefix"
    fi

    printf '%s' "$libdir"
}

remove_path () {
    path="$1"
    value="$2"

    printf '%s' "$value" |
    tr ':' '\n' |
    grep -v ^"$path" |
    tr '\n' ':' |
    sed -e 's/:$//'
}

main "$@"
